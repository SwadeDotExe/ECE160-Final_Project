/*
    ECE160 Final Project
    Written By: Swade, Brendan, and Justin
    Last Updated: 2/20/2021

    This code contains all the information required to complete the final project
    for ECE160, which is driving a robot (Boebot) to deliver an item of food from
    a specified pickup location. During this task, a portion of it is required to
    be done autonomously using line following.

    The robot has two main modes of operation:

       Manual: Reads the user input from the PlayStation controller and moves the
                robot according to the input.
       Automatic: Firstly, spins roughly 180 degrees until a line is detected. Then,
                  Reads the 3 line following sensors and makes judgements on what
                  motion is needed to stay following the line. Continues until the
                  intersection is detect, then spins 90 degrees and continues forward
                  until manual mode is necessary.

    Materials Used:
      - Boebot robot
      - Arduino Uno
      - Gripper w/ Servo Motor
      - 5x NiMH Batteries
      - PlayStation 2 Controller
      - PlayStation 2 Receiver
      - Line Following Module
      - 1x RGB LED
      - Various Resistors
      - Various Jumper Wires

    Script Overview:
      - Sets up all the pins, variables, and libraries used in the script.
      - Sees what mode it is currently in (manual by default):
          - Manual
              - Read the controller input
              - Runs a function based off if button was pressed
              - Loop back to see what mode it is in
          - Automatic
              - Spin the robot ~160 degrees
              - Keeps spinning until line follower detects ideal
                conditions for line following
              - Begin line following loop
                  - If left or right thresholds are met, spin opposite direction
                  - If intersection conditions are met, spin in the direction
                    of the intersection
                  - Break when robot is in manual control area
              - Set mode to manual when robot exits line following area
*/

/*
   ########################################
   ###    Initialization and Variables  ###
   ########################################
*/
// External Libraries
#include <Servo.h>
#include <PS2X_lib.h>

// Main Drive Motors
int leftServoPin = 12;
int rightServoPin = 10;
Servo rightServo;
Servo leftServo;
int motor_speed = 1500;
int imotor_speed = 1500;

// Gripper Motor
int gripServoPin = 11;
Servo gripServo;

// PlayStation Controller Setup
PS2X ps2x;

// States
int error = 0;
int type = 0;
int mode = 0;
int cmode = 0;
int ControlState = 0;
long distance = 0;
bool bruhmeous_momentum = true;
bool lane_assist = false;
int button1 = 3;
bool button1_State;
int ActiveController = 0;
int ButtonCount = 0;

// Line Following Calibration
int left_sensor = A0;
int middle_sensor = A1;
int right_sensor = A2;
int whiteread = 850; //500 for poster, 900 for table
int blackread = 900; //700 for poster, 900 for table
int left_boi = 0;
int middle_boi = 0;
int right_boi = 0;

// Debugging LED Setup
int BlueLED = 7;
int GreenLED = 4;
int Ir_LED_pin = 7;

/*
   ########################################
   ###          Functions               ###
   ########################################
*/

// Function to see if the mode toggle switch is pressed
void ButtonRead() {
  button1_State = digitalRead(button1);
  if (button1_State == 1)
  {
    ControlSwitch();
    delay(200);
  }
}

// Function to switch between manual and automatic mode
void ControlSwitch() {
  if (mode == 0) {
    mode = 1;
    digitalWrite(BlueLED, LOW);
    digitalWrite(GreenLED, HIGH);
    Serial.println("Autonomous");
  }
  else {
    mode = 0;
    digitalWrite(BlueLED, HIGH);
    digitalWrite(GreenLED, LOW);
    Serial.println("PlayStation");
  }
}

// Function to break out of automatic mode in case of an emergency
void emergency_meeting() {
  ps2x.read_gamepad();
  if (ps2x.Button(PSB_GREEN)) {
    bruhmeous_momentum = true;
    ControlSwitch();
  }
}

// Main Setup function
void setup() {
  // Servo Setup
  rightServo.attach(rightServoPin);
  leftServo.attach(leftServoPin);
  rightServo.writeMicroseconds(1490);
  leftServo.writeMicroseconds(1490);
  gripServo.attach(gripServoPin);
  gripServo.write(90);

  // LED Setup
  pinMode(Ir_LED_pin, OUTPUT);
  pinMode(BlueLED, OUTPUT);
  pinMode(GreenLED, OUTPUT);
  digitalWrite(BlueLED, LOW);
  digitalWrite(GreenLED, LOW);

  // PlayStation Controller Setup
  ps2x.config_gamepad(9, 5, 6, 8, true, false);
  ps2x.readType();

  Serial.begin(57600);
}

void loop() {
  switch (mode) {

    // PlayStation Controller
    case 0:
      ButtonRead();

      // Set LED to indicate we are in PlayStation mode
      analogWrite(A3, 255);
      analogWrite(A4, 127);
      ps2x.read_gamepad();
      joy_stick_move();

      // Checks all the buttons we are interested in
      if (ps2x.ButtonPressed(PSB_START)) {
        ControlSwitch();
        delay(50);
      }
      if (ps2x.ButtonPressed(PSB_RED)) {
        openGrip();
      }
      if (ps2x.ButtonPressed(PSB_BLUE)) {
        closeGrip();
      }
      if (ps2x.Button(PSB_L1)) {
        turnLeft2();
      }
      if (ps2x.Button(PSB_R1)) {
        turnRight2();
      }
      if (ps2x.Button(PSB_PAD_UP)) {
        lane_assist = true;
      }
      if (ps2x.Button(PSB_PAD_DOWN)) {
        lane_assist = false;
      }
      if (ps2x.Button(PSB_PINK)) {
        digitalWrite(Ir_LED_pin, HIGH);
        delay(500);
        digitalWrite(Ir_LED_pin, LOW);
        delay(500);
      }

      // Calls our function to help assist us lining up on the line
      if (lane_assist) {
        autoDrive();
      }
      delay(20);
      leftServo.writeMicroseconds(motor_speed);
      rightServo.writeMicroseconds(imotor_speed);
      break;

    // Line following mode
    case 1:
      ButtonRead();

      // Turns LED off
      digitalWrite(A3, LOW);
      digitalWrite(A4, LOW);
      digitalWrite(A5, LOW);

      // Checks to see if the robot needs to spin 180 degrees
      if (bruhmeous_momentum) {
        for (int i = 1; i < 450; i++) {
          spinRight();
        }

        // Continues spinning until robot is lined up correctly
        while (left_boi <= blackread && middle_boi >= whiteread && right_boi <= blackread) {
          spinLeft();
        }
        bruhmeous_momentum = false;
      }

      // Calls the automatic driving function to take over control
      autoDrive();

      Serial.println("Left sensor: " + String(analogRead(left_sensor)) + " " + "Middle sensor: " + String(analogRead(middle_sensor)) + " " + "Right sensor: " + String(analogRead(right_sensor)));
      break;

  }
}

// Function for line following
void autoDrive() {
  read_sensors();

  // Continue straight
  if (left_boi >= blackread && middle_boi <= whiteread && right_boi >= blackread) {
    analogWrite(A4, 255);
    forward();
  }

  // Turn Right - Blue Resturant
  if (right_boi < whiteread) {
    turnRight();
    analogWrite(A3, 255);
  }

  // Turn Left - Blue Resturant
  if (left_boi < whiteread ) {
    analogWrite(A5, 255);
    turnLeft();
  }
  if (middle_boi >= whiteread && middle_boi < blackread) {

    // Turn Right - Yellow Resturant
    if (right_boi < left_boi) {
      turnRight();
      analogWrite(A3, 255);
    }

    // Turn Left - Yellow Resturant
    else {
      analogWrite(A5, 255);
      turnLeft();
    }
  }

  // Intersection from yellow resturant
  if (left_boi < whiteread && middle_boi < whiteread && right_boi > blackread) {
    Stop();
    delay(20);
    int bs = 0;
    for (int i = 0; i < 220; i++) {
      spinLeft();
      bs = (bs + 1) % 2;
      if (bs == 1) {
        turnRight();
      }
    }
    for (int i = 0; i < 2000; i++) {
      forward();
    }
    Stop();
    bruhmeous_momentum = true;
    ControlSwitch();
  }

  // Intersection from Blue resturant
  if (right_boi < whiteread && middle_boi < whiteread && left_boi > blackread) {
    Stop();
    delay(20);
    int bs = 0;
    for (int i = 0; i < 220; i++) {
      spinRight();
      bs = (bs + 1) % 2;
      if (bs == 1) {
        turnLeft();
      }
    }
    for (int i = 0; i < 2000; i++) {
      forward();
    }
    Stop();
    bruhmeous_momentum = true;
    ControlSwitch();
  }

  // A catch-all if the robot is in an unexpected state
  if (right_boi < whiteread && middle_boi < whiteread && left_boi < whiteread) {
    Stop();
    bruhmeous_momentum = true;
    ControlSwitch();
  }
}

// Function to map PlayStation joysticks to usable range
void joy_stick_move() {
  int ly = ps2x.Analog(PSS_LY);
  int ry = ps2x.Analog(PSS_RY);
  imotor_speed = map(ry, 0, 255, 1000, 2000);
  motor_speed = map(ly, 0, 255, 2000, 1000);
  motor_speed += 2;
  motor_speed = constrain(motor_speed, 1000, 2000);
  imotor_speed -= 2;
  imotor_speed = constrain(imotor_speed, 1000, 2000);
  if (motor_speed > 1490 && motor_speed < 1510) {
    motor_speed = 1490;
  }
  if (imotor_speed > 1490 && imotor_speed < 1510) {
    imotor_speed = 1490;
  }
}

// Function to read the line following sensors
void read_sensors() {
  left_boi = analogRead(left_sensor);
  middle_boi = analogRead(middle_sensor);
  right_boi = analogRead(right_sensor);
}

/*
   ########################################
   ###          Drive Functions         ###
   ########################################
*/

void forward() {
  rightServo.writeMicroseconds(1000);
  leftServo.writeMicroseconds(2000);
  Serial.println("forward");
}

void reverse() {
  rightServo.writeMicroseconds(2000);
  leftServo.writeMicroseconds(1000);
  Serial.println("reverse");
}


void spinRight() {
  rightServo.writeMicroseconds(1700);
  leftServo.writeMicroseconds(1700);
  Serial.println("Spinning Right");
}

void spinLeft() {
  rightServo.writeMicroseconds(1300);
  leftServo.writeMicroseconds(1300);
  Serial.println("Spinning Left");
}

void Stop() {
  rightServo.writeMicroseconds(1490);
  leftServo.writeMicroseconds(1490);
  Serial.println("Stopping");
}

void openGrip() {
  gripServo.write(0);
  Serial.println("Opening");
}

void closeGrip() {
  gripServo.write(180);
  Serial.println("Closing");
}

void turnLeft() {
  rightServo.writeMicroseconds(1250);
  leftServo.writeMicroseconds(1550);
}
void turnLeft2() {
  motor_speed = 1600;
  imotor_speed = 1450;
}
void turnRight() {
  rightServo.writeMicroseconds(1450);
  leftServo.writeMicroseconds(1600);
}
void turnRight2() {
  motor_speed = 1550;
  imotor_speed = 1250;
}
